
'''
!!! DO NOT EDIT THIS FILE !!!
'''
import random
from unit_1d_hw import *



def test_useless_function():
    assert useless_function() == None, f"Should return `{None}`, your function returned `{useless_function()}`"

def test_integer_return_5():
    assert integer_return_5() == 5, f"Should return `{5}`, your function returned `{integer_return_5()}`"

def test_string_return_I_am_a_string():
    assert string_return_I_am_a_string() == "I am a string!", f'Should return: "I am a string!", your function returned: {string_return_I_am_a_string()}'

def test_add_one():
    x = random.random()
    assert add_one(x) == x + 1, f"Should return `{x + 1}`, your function returned `{add_one()}`"


def test_add_x_y():
    x = random.randrange(-999, 999)
    y = random.randrange(-999, 999)
    assert add_x_y(x, y) == x + y, f"When x is {x}, and y is {y}, correct answer is {x+y}, but \
    your function returned {add_x_y(x, y)}"

def test_slope_intercept_function():
    m = random.randrange(-999, 999)
    x = random.randrange(-999, 999)
    b = random.randrange(-999, 999)
    assert slope_intercept_function(m, x, b) == m * x + b, f"Expected: {m * x + b} but your function returned: {slope_intercept_function(m, x, b)}"

def test_multi_return():
    x = random.randrange(-999, 999)
    y = random.randrange(-999, 999)
    assert len(multi_return(x, y)) == 2, f"multi_return must return 2 values, your function returned {len(multi_return(x, y))} values"
    x_out, y_out = multi_return(x, y)
    assert x_out == x * 5, f"The scaled x value should be: {x * 5}, but your scaled x value was {x_out}"
    assert y_out == y + 2, f"The incremented y value should be: {y + 2}, but your incremented y value was {y_out}"


def test_default_args():
    x_before_prepend = [5, 6, 7, 8, 9]
    assert default_args(x_before_prepend, 4) == [4, 5, 6, 7, 8, 9], f"Passed in {x_before_prepend} and 4, list returned should be {[4, 5, 6, 7, 8, 9]}, but your function returned {default_args(x_before_prepend, 4)}"
    assert default_args([7, 3, 2, 4, 1]) == [5, 7, 3, 2, 4, 1], f"Passed in just {[7, 3, 2, 4, 1]} with no prepend value (resorting to default), list returned should be {[5, 7, 3, 2, 4, 1]}, but got {default_args([5, 7, 3, 2, 4, 1])}"

def test_car_class():
    mpg = random.randrange(-999,999)
    car_class = Car(miles_per_gallon=mpg)
    assert car_class.mpg == mpg, f"Expected car_class's mpg field to be {mpg} but your class's mpg field contained {car_class.mpg}"

def test_dog_class():
    possible_dog_breeds = {"American Foxhound":66.87, "Australian Shepherd":37, "Beagle":20.3, "Chihuahua":4.53, "Great Dane":144.2, "Greyhound":70.96, "Mastiff":220.3, "Newfoundland":135.2, "Papillon":9.2, "Poodle":5.55, "Pug":16.01, "Rottweiler":122.3, "Shih Tzu":12.2, "Yorkshire Terrier":6.46}
    key = random.choice(list(possible_dog_breeds.keys()))     
    dog_class = Dog(breed=key, weight=possible_dog_breeds[key])
    assert dog_class.breed == key, f"Expecting breed field to be {key} but your class's field contianed {dog_class.breed}"
    assert dog_class.weight == possible_dog_breeds[key], f"Expected weight field to be {possible_dog_breeds[key]} but your class's field contained {dog_class.weight}."
    assert dog_class.get_breed() == key, f"Expecting get_breed() function to return {key} but your function returned {dog_class.get_breed()}"
    assert dog_class.get_weight() == possible_dog_breeds[key], f"Expected get_weight() function to return {possible_dog_breeds[key]} but your function returned {dog_class.get_weight()}."
    
def test_math_operations_class():
    math_operations = Math_Operations()
    a = random.randrange(-999,999)
    b = random.randrange(-999,999)
    m = random.randrange(-999,999)
    assert math_operations.add(a=a, b=b) == (a+b), f"Math_Operations: expected your add function to return {(a+b)} but it returned {math_operations.add(a=a, b=b)}"
    assert math_operations.sub(a=a, b=b) == (a-b), f"Math_Operations: expected your sub function to return {(a-b)} but it returned {math_operations.sub(a=a, b=b)}"
    assert math_operations.slope_intercept(m=m, x=a, b=b) == m*a+b, f"Math_Operations: expected your slope_intercept function to return {m*a+b} but it returned {math_operations.slope_intercept(m=m, x=a, b=b)}"
    assert math_operations.pythagorean(a=a, b=b) == (a**2+b**2)**0.5, f"Math_Operations: expected your pythagorean function to return {(a**2+b**2)**0.5} but it returned {math_operations.pythagorean(a=a, b=b)}"
    